[
  {
    "source": "aifp_run",
    "target": "project_init",
    "relation_type": "triggers",
    "description": "aifp_run triggers project_init when user requests project initialization",
    "weight": 1,
    "active": true
  },
  {
    "source": "aifp_run",
    "target": "project_task_decomposition",
    "relation_type": "triggers",
    "description": "aifp_run triggers project_task_decomposition for task management requests",
    "weight": 1,
    "active": true
  },
  {
    "source": "aifp_run",
    "target": "project_file_write",
    "relation_type": "triggers",
    "description": "aifp_run triggers project_file_write for code generation requests",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_init",
    "target": "project_task_decomposition",
    "relation_type": "triggers",
    "description": "project_init triggers project_task_decomposition after project setup",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_init",
    "target": "project_add_path",
    "relation_type": "triggers",
    "description": "project_init triggers project_add_path to create initial roadmap",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "project_add_path",
    "relation_type": "triggers",
    "description": "project_task_decomposition triggers project_add_path when creating milestones",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "project_error_handling",
    "relation_type": "escalates_to",
    "description": "project_task_decomposition escalates to project_error_handling on workflow failures",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "project_compliance_check",
    "relation_type": "escalates_to",
    "description": "project_task_decomposition escalates to project_compliance_check for validation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "project_add_path",
    "relation_type": "cross_link",
    "description": "project_task_decomposition cross-links with project_add_path for roadmap updates",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_add_path",
    "target": "project_file_write",
    "relation_type": "triggers",
    "description": "project_add_path triggers project_file_write after roadmap setup",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_add_path",
    "target": "project_completion_check",
    "relation_type": "triggers",
    "description": "project_add_path triggers project_completion_check to validate path status",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_write",
    "target": "project_update_db",
    "relation_type": "triggers",
    "description": "project_file_write triggers project_update_db after file creation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_write",
    "target": "project_theme_flow_mapping",
    "relation_type": "triggers",
    "description": "project_file_write triggers project_theme_flow_mapping for categorization",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_write",
    "target": "fp_purity",
    "relation_type": "fp_reference",
    "description": "project_file_write calls fp_purity to validate function purity",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_write",
    "target": "fp_side_effect_detection",
    "relation_type": "fp_reference",
    "description": "project_file_write calls fp_side_effect_detection to isolate side effects",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_update_db",
    "target": "project_dependency_sync",
    "relation_type": "triggers",
    "description": "project_update_db triggers project_dependency_sync for consistency checks",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_update_db",
    "target": "project_compliance_check",
    "relation_type": "escalates_to",
    "description": "project_update_db escalates to project_compliance_check for validation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_update_db",
    "target": "fp_dependency_tracking",
    "relation_type": "fp_reference",
    "description": "project_update_db calls fp_dependency_tracking to map function dependencies",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_theme_flow_mapping",
    "target": "project_metrics",
    "relation_type": "triggers",
    "description": "project_theme_flow_mapping triggers project_metrics after categorization",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_theme_flow_mapping",
    "target": "project_metrics",
    "relation_type": "cross_link",
    "description": "project_theme_flow_mapping cross-links with project_metrics for theme-based reporting",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_theme_flow_mapping",
    "target": "fp_chaining",
    "relation_type": "fp_reference",
    "description": "project_theme_flow_mapping references fp_chaining for flow analysis",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_dependency_sync",
    "target": "project_integrity_check",
    "relation_type": "triggers",
    "description": "project_dependency_sync triggers project_integrity_check after sync",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_dependency_sync",
    "target": "project_metrics",
    "relation_type": "triggers",
    "description": "project_dependency_sync triggers project_metrics for dependency reporting",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_dependency_sync",
    "target": "project_update_db",
    "relation_type": "cross_link",
    "description": "project_dependency_sync cross-links with project_update_db for bidirectional sync",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "project_completion_check",
    "relation_type": "triggers",
    "description": "project_compliance_check triggers project_completion_check after validation passes",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "project_metrics",
    "relation_type": "triggers",
    "description": "project_compliance_check triggers project_metrics for compliance reporting",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "project_error_handling",
    "relation_type": "escalates_to",
    "description": "project_compliance_check escalates to project_error_handling on failures",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "fp_purity",
    "relation_type": "fp_reference",
    "description": "project_compliance_check calls fp_purity for purity validation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "fp_no_oop",
    "relation_type": "fp_reference",
    "description": "project_compliance_check calls fp_no_oop for OOP detection",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "fp_side_effect_detection",
    "relation_type": "fp_reference",
    "description": "project_compliance_check calls fp_side_effect_detection for side effect validation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_completion_check",
    "target": "project_metrics",
    "relation_type": "triggers",
    "description": "project_completion_check triggers project_metrics for progress calculation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_completion_check",
    "target": "project_auto_summary",
    "relation_type": "triggers",
    "description": "project_completion_check triggers project_auto_summary for status reports",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_error_handling",
    "target": "project_user_referral",
    "relation_type": "triggers",
    "description": "project_error_handling triggers project_user_referral for unresolved issues",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_evolution",
    "target": "project_add_path",
    "relation_type": "triggers",
    "description": "project_evolution triggers project_add_path when project goals change",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_evolution",
    "target": "project_metrics",
    "relation_type": "triggers",
    "description": "project_evolution triggers project_metrics after pivot",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_integrity_check",
    "target": "project_backup_restore",
    "relation_type": "triggers",
    "description": "project_integrity_check triggers project_backup_restore on corruption detection",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_integrity_check",
    "target": "project_error_handling",
    "relation_type": "escalates_to",
    "description": "project_integrity_check escalates to project_error_handling on data misalignment",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_auto_resume",
    "target": "project_task_decomposition",
    "relation_type": "triggers",
    "description": "project_auto_resume triggers project_task_decomposition to resume paused tasks",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_auto_resume",
    "target": "project_file_write",
    "relation_type": "triggers",
    "description": "project_auto_resume triggers project_file_write to resume code generation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_refactor_path",
    "target": "project_add_path",
    "relation_type": "escalates_to",
    "description": "project_refactor_path escalates to project_add_path for roadmap restructuring",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_archive",
    "target": "project_completion_check",
    "relation_type": "depends_on",
    "description": "project_archive depends on project_completion_check to verify completion",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_archive",
    "target": "project_metrics",
    "relation_type": "depends_on",
    "description": "project_archive depends on project_metrics for final reports",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_metrics",
    "target": "project_performance_summary",
    "relation_type": "triggers",
    "description": "project_metrics triggers project_performance_summary for detailed analysis",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_metrics",
    "target": "project_auto_summary",
    "relation_type": "triggers",
    "description": "project_metrics triggers project_auto_summary for user-facing reports",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_performance_summary",
    "target": "project_auto_summary",
    "relation_type": "triggers",
    "description": "project_performance_summary triggers project_auto_summary for consolidated reporting",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_dependency_map",
    "target": "project_integrity_check",
    "relation_type": "cross_link",
    "description": "project_dependency_map cross-links with project_integrity_check for validation",
    "weight": 1,
    "active": true
  },
  {
    "source": "aifp_run",
    "target": "user_preferences_sync",
    "relation_type": "triggers",
    "description": "aifp_run triggers user_preferences_sync before executing any project directive",
    "weight": 1,
    "active": true
  },
  {
    "source": "aifp_run",
    "target": "user_preferences_update",
    "relation_type": "triggers",
    "description": "aifp_run triggers user_preferences_update when user explicitly requests behavior change",
    "weight": 1,
    "active": true
  },
  {
    "source": "user_preferences_sync",
    "target": "project_file_write",
    "relation_type": "cross_link",
    "description": "user_preferences_sync loads preferences before project_file_write execution",
    "weight": 1,
    "active": true
  },
  {
    "source": "user_preferences_sync",
    "target": "project_compliance_check",
    "relation_type": "cross_link",
    "description": "user_preferences_sync loads preferences before project_compliance_check execution",
    "weight": 1,
    "active": true
  },
  {
    "source": "user_preferences_update",
    "target": "user_preferences_sync",
    "relation_type": "depends_on",
    "description": "user_preferences_update depends on user_preferences_sync to initialize database",
    "weight": 1,
    "active": true
  },
  {
    "source": "user_preferences_learn",
    "target": "user_preferences_update",
    "relation_type": "triggers",
    "description": "user_preferences_learn triggers user_preferences_update after confirming learned preference",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_write",
    "target": "project_notes_log",
    "relation_type": "triggers",
    "description": "project_file_write triggers project_notes_log for clarifications and decisions",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "project_notes_log",
    "relation_type": "triggers",
    "description": "project_task_decomposition triggers project_notes_log for ambiguity clarifications",
    "weight": 1,
    "active": true
  },
  {
    "source": "user_preferences_export",
    "target": "user_preferences_sync",
    "relation_type": "depends_on",
    "description": "user_preferences_export depends on user_preferences_sync to access preferences database",
    "weight": 1,
    "active": true
  },
  {
    "source": "user_preferences_import",
    "target": "user_preferences_sync",
    "relation_type": "depends_on",
    "description": "user_preferences_import depends on user_preferences_sync to initialize database",
    "weight": 1,
    "active": true
  },
  {
    "source": "tracking_toggle",
    "target": "user_preferences_sync",
    "relation_type": "depends_on",
    "description": "tracking_toggle depends on user_preferences_sync to access tracking_settings table",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_init",
    "target": "git_init",
    "relation_type": "triggers",
    "description": "project_init triggers git_init to initialize Git repository for version control",
    "weight": 1,
    "active": true
  },
  {
    "source": "aifp_run",
    "target": "git_sync_state",
    "relation_type": "triggers",
    "description": "aifp_run triggers git_sync_state on session boot to detect external changes",
    "weight": 1,
    "active": true
  },
  {
    "source": "git_sync_state",
    "target": "git_detect_external_changes",
    "relation_type": "triggers",
    "description": "git_sync_state triggers git_detect_external_changes when commit hash differs",
    "weight": 1,
    "active": true
  },
  {
    "source": "git_detect_external_changes",
    "target": "project_theme_flow_mapping",
    "relation_type": "cross_link",
    "description": "git_detect_external_changes queries project_theme_flow_mapping to analyze affected themes",
    "weight": 1,
    "active": true
  },
  {
    "source": "git_detect_external_changes",
    "target": "project_update_db",
    "relation_type": "triggers",
    "description": "git_detect_external_changes triggers project_update_db to sync Git hash in project table",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "git_create_branch",
    "relation_type": "triggers",
    "description": "project_task_decomposition triggers git_create_branch for multi-user task isolation",
    "weight": 1,
    "active": true
  },
  {
    "source": "git_create_branch",
    "target": "project_update_db",
    "relation_type": "triggers",
    "description": "git_create_branch triggers project_update_db to store branch metadata in work_branches table",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_update",
    "target": "git_merge_branch",
    "relation_type": "triggers",
    "description": "project_task_update triggers git_merge_branch when task is completed and branch should be merged",
    "weight": 1,
    "active": true
  },
  {
    "source": "git_merge_branch",
    "target": "git_detect_conflicts",
    "relation_type": "depends_on",
    "description": "git_merge_branch depends on git_detect_conflicts for FP-powered conflict analysis",
    "weight": 1,
    "active": true
  },
  {
    "source": "git_detect_conflicts",
    "target": "fp_purity",
    "relation_type": "fp_reference",
    "description": "git_detect_conflicts references fp_purity to analyze function purity for conflict resolution",
    "weight": 1,
    "active": true
  },
  {
    "source": "git_detect_conflicts",
    "target": "fp_dependency_tracking",
    "relation_type": "fp_reference",
    "description": "git_detect_conflicts references fp_dependency_tracking to compare function dependencies",
    "weight": 1,
    "active": true
  },
  {
    "source": "git_merge_branch",
    "target": "project_update_db",
    "relation_type": "triggers",
    "description": "git_merge_branch triggers project_update_db to log merge history and update work_branches status",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_write",
    "target": "git_sync_state",
    "relation_type": "triggers",
    "description": "project_file_write triggers git_sync_state after code commits to update project.last_known_git_hash",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "fp_test_purity",
    "relation_type": "fp_reference",
    "description": "Compliance check uses fp_test_purity to validate test code purity",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "fp_api_design",
    "relation_type": "fp_reference",
    "description": "Compliance check uses fp_api_design for public API validation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_write",
    "target": "fp_documentation",
    "relation_type": "fp_reference",
    "description": "File write triggers fp_documentation to ensure proper code documentation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "fp_naming_conventions",
    "relation_type": "fp_reference",
    "description": "Compliance check uses fp_naming_conventions to validate naming standards",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_write",
    "target": "fp_naming_conventions",
    "relation_type": "fp_reference",
    "description": "File write uses fp_naming_conventions to validate function/variable names",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_compliance_check",
    "target": "project_file_read",
    "relation_type": "depends_on",
    "description": "Compliance check depends on project_file_read to load file context",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_write",
    "target": "project_file_read",
    "relation_type": "depends_on",
    "description": "File write may depend on project_file_read to check existing code",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_delete",
    "target": "project_update_db",
    "relation_type": "triggers",
    "description": "File delete triggers DB update to remove file records and orphaned functions",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_file_delete",
    "target": "project_dependency_sync",
    "relation_type": "triggers",
    "description": "File delete triggers dependency sync to check for broken dependencies",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "project_task_create",
    "relation_type": "triggers",
    "description": "Task decomposition triggers project_task_create for individual task creation",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_create",
    "target": "project_update_db",
    "relation_type": "triggers",
    "description": "Task creation triggers DB update to insert task record",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "project_subtask_create",
    "relation_type": "triggers",
    "description": "Task decomposition triggers project_subtask_create for task refinement",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_subtask_create",
    "target": "project_task_update",
    "relation_type": "triggers",
    "description": "Subtask creation triggers task update to pause parent task",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "project_item_create",
    "relation_type": "triggers",
    "description": "Task decomposition triggers project_item_create for checklist items",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_task_decomposition",
    "target": "project_sidequest_create",
    "relation_type": "triggers",
    "description": "Task decomposition triggers project_sidequest_create for exploratory work",
    "weight": 1,
    "active": true
  },
  {
    "source": "project_sidequest_create",
    "target": "project_task_update",
    "relation_type": "triggers",
    "description": "Sidequest creation triggers task update to pause related task",
    "weight": 1,
    "active": true
  }
]
