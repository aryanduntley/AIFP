[
  {
    "name": "aifp_run",
    "type": "project",
    "level": 0,
    "parent_directive": null,
    "category": {
      "name": "orchestration",
      "description": "Gateway and reminder for AIFP directive application."
    },
    "description": "Gateway entry point for AIFP system. Returns guidance to AI assistant on when and how to use AIFP directives. Does NOT execute directives itself - AI receives guidance and decides next action based on task type (coding, project management, or simple discussion). Always assume AIFP applies unless user explicitly rejects. First action should be calling aifp_status to understand current project state.",
    "md_file_path": "directives/aifp_run.md",
    "workflow": {
      "trunk": "return_guidance",
      "branches": [
        {
          "then": "return_simple_guidance_message",
          "details": {
            "message": "AIFP MCP available",
            "guidance": {
              "directive_access": "Call get_all_directives() if you don't have them in memory. Call get_directive(name) or search_directives(keyword, category, type) for specific details.",
              "when_to_use": "Use AIFP directives when coding or when project management action/reaction is needed.",
              "assumption": "Always assume AIFP applies unless user explicitly rejects it with 'do not use aifp for this task'.",
              "first_action": "If user says 'continue', 'status', 'what's next', 'resume work', or starts session without clear context, call aifp_status first to understand project state.",
              "status_triggers": [
                "continue",
                "status",
                "what's next",
                "resume",
                "resume work",
                "show status",
                "project status"
              ],
              "available_helpers": [
                "get_all_directives",
                "get_directive",
                "search_directives",
                "query_mcp_db",
                "get_project_context",
                "get_project_status",
                "get_project_files",
                "get_project_functions",
                "get_project_tasks",
                "query_project_db"
              ]
            },
            "ai_decision_flow": [
              "1. Check: Is this a status/continuation request? \u2192 Call aifp_status",
              "2. Check: project.user_directives_status='active'? \u2192 Include user directive context",
              "3. Evaluate: Is this coding, project management, or user directive automation?",
              "4. Check: Do I have directives in memory?",
              "5. If no directives: Call get_all_directives()",
              "6. If coding: Apply FP directives (how to code) + project directives (DB updates)",
              "7. If project management: Apply project directives",
              "8. If user directive task (parse/validate/implement/activate): Apply user directive system directives",
              "9. If simple discussion: No directives needed unless decision impacts project"
            ]
          }
        }
      ],
      "error_handling": {
        "on_failure": "return_guidance_anyway"
      }
    },
    "roadblocks_json": [
      {
        "issue": "ai_bypasses_aifp",
        "resolution": "System prompt should enforce: 'If AIFP MCP present, always call aifp_run unless explicitly rejected'"
      },
      {
        "issue": "ai_forgets_directives",
        "resolution": "AI should call get_all_directives() when directives not in memory"
      },
      {
        "issue": "ai_unsure_when_to_use",
        "resolution": "Guidance clarifies: coding + project management = use directives"
      },
      {
        "issue": "ai_starts_without_context",
        "resolution": "Call aifp_status first to understand project state and current focus"
      }
    ],
    "intent_keywords_json": [
      "run",
      "execute",
      "aifp",
      "start",
      "continue",
      "status",
      "resume"
    ],
    "confidence_threshold": 1.0
  },
  {
    "name": "project_init",
    "type": "project",
    "level": 1,
    "parent_directive": "aifp_run",
    "category": {
      "name": "initialization",
      "description": "Handles creation and setup of new AIFP projects with ProjectBlueprint.md creation."
    },
    "description": "Initializes a new AIFP project by creating .aifp-project/ folder structure, generating ProjectBlueprint.md through interactive prompts, initializing project.db and user_preferences.db, and populating with initial infrastructure, themes, flows, and completion path. Wraps the standalone initialization script (aifp.scripts.init_aifp_project) helper functions to ensure consistent setup. Checks for existing .aifp-project/ or .git/.aifp/ folders before initialization. Offers restoration from .git/.aifp/ backup if found.",
    "md_file_path": "directives/project_init.md",
    "workflow": {
      "trunk": "check_existing_state",
      "branches": [
        {
          "if": "aifp_folder_exists",
          "then": "call_aifp_status",
          "details": {
            "message": ".aifp-project/ folder already exists"
          }
        },
        {
          "if": "git_aifp_backup_exists",
          "then": "prompt_restore_or_new",
          "details": {
            "check_path": ".git/.aifp/ProjectBlueprint.md"
          }
        },
        {
          "if": "restore_chosen",
          "then": "restore_from_git_backup",
          "details": {
            "copy_from": ".git/.aifp/",
            "copy_to": ".aifp-project/"
          }
        },
        {
          "if": "new_project_chosen",
          "then": "interactive_blueprint_creation",
          "details": {
            "prompts": [
              "project_name",
              "purpose",
              "goals",
              "language",
              "build_tool",
              "fp_strictness_level"
            ]
          }
        },
        {
          "if": "blueprint_prompts_complete",
          "then": "create_project_structure",
          "details": {
            "helper": "create_project_directory",
            "module": "aifp.scripts.init_aifp_project",
            "parameters": {
              "target_path": "user_working_dir"
            },
            "create_folders": [
              ".aifp-project/",
              ".aifp-project/backups/"
            ],
            "note": "Uses standalone initialization script helper function"
          }
        },
        {
          "if": "structure_created",
          "then": "generate_project_blueprint",
          "details": {
            "helper": "create_project_blueprint",
            "module": "aifp.scripts.init_aifp_project",
            "parameters": {
              "aifp_dir": ".aifp-project/",
              "metadata": "from_prompts"
            },
            "template": "ProjectBlueprint_template.md",
            "output": ".aifp-project/ProjectBlueprint.md",
            "note": "Uses standalone initialization script helper function"
          }
        },
        {
          "if": "blueprint_generated",
          "then": "initialize_databases",
          "details": {
            "helper_project_db": "initialize_project_db",
            "helper_prefs_db": "initialize_user_preferences_db",
            "module": "aifp.scripts.init_aifp_project",
            "parameters": {
              "aifp_dir": ".aifp-project/",
              "project_metadata": "from_prompts"
            },
            "databases": [
              "project.db",
              "user_preferences.db"
            ],
            "schemas": [
              "project_db_schema.sql",
              "user_preferences_schema.sql"
            ],
            "note": "Uses standalone initialization script helper functions"
          }
        },
        {
          "if": "databases_initialized",
          "then": "validate_initialization",
          "details": {
            "helper": "validate_initialization",
            "module": "aifp.scripts.init_aifp_project",
            "parameters": {
              "aifp_dir": ".aifp-project/"
            },
            "checks": [
              "project.db exists and has metadata",
              "user_preferences.db has schema",
              "ProjectBlueprint.md exists",
              "all required tables created"
            ],
            "note": "Validates complete initialization using script function"
          }
        },
        {
          "if": "validation_passed",
          "then": "populate_project_data",
          "details": {
            "tables": [
              "project",
              "infrastructure",
              "completion_path",
              "milestones"
            ],
            "note": "Project metadata already populated by initialize_project_db helper"
          }
        },
        {
          "if": "project_data_populated",
          "then": "create_initial_completion_path",
          "details": {
            "stages": [
              "Setup",
              "Core Development",
              "Finalization"
            ]
          }
        },
        {
          "if": "completion_path_created",
          "then": "prompt_user_directives_init",
          "details": {
            "prompt": "Initialize user directives system? (y/n)",
            "optional": true
          }
        },
        {
          "if": "user_directives_yes",
          "then": "init_user_directives_db",
          "details": {
            "create_db": "user_directives.db",
            "apply_schema": "user_directives_schema.sql",
            "set_status": "in_progress"
          }
        },
        {
          "if": "user_directives_no_or_complete",
          "then": "initialize_git_if_needed",
          "details": {
            "trigger": "git_init directive",
            "action": "Initialize or integrate with Git repository"
          }
        },
        {
          "if": "git_initialized",
          "then": "backup_blueprint",
          "details": {
            "backup_to": ".aifp-project/backups/ProjectBlueprint.md.backup"
          }
        },
        {
          "if": "backup_complete",
          "then": "report_success",
          "details": {
            "show": [
              "project_name",
              "blueprint_path",
              "databases",
              "completion_stages",
              "user_directives_status",
              "git_status"
            ]
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Provide missing project details or choose restoration option"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user",
        "retry": "max 2 attempts"
      }
    },
    "roadblocks_json": [
      {
        "issue": "db_creation_failed",
        "resolution": "Check file permissions or re-run as admin"
      },
      {
        "issue": "schema_missing",
        "resolution": "Verify schema file in /schemas/"
      },
      {
        "issue": "aifp_folder_exists",
        "resolution": "Call aifp_status to show existing project state"
      },
      {
        "issue": "blueprint_generation_failed",
        "resolution": "Use default template and prompt user for manual completion"
      },
      {
        "issue": "git_backup_corrupted",
        "resolution": "Prompt user to start fresh or provide backup manually"
      }
    ],
    "intent_keywords_json": [
      "create project",
      "initialize",
      "start project",
      "init project",
      "new project"
    ],
    "confidence_threshold": 0.8
  },
  {
    "name": "project_task_decomposition",
    "type": "project",
    "level": 2,
    "parent_directive": "aifp_run",
    "category": {
      "name": "task_management",
      "description": "Manages decomposition of user goals into AIFP-aligned tasks, subtasks, and sidequests."
    },
    "description": "Decomposes high-level user requests into completion_path, milestones, tasks, subtasks, and items. Respects user preferences for task granularity, naming conventions, and decomposition style. Creates roadmap structure and ensures hierarchy consistency. Central decomposition directive; translates user intent into actionable milestones.",
    "md_file_path": "directives/project_task_decomposition.md",
    "workflow": {
      "trunk": "check_user_preferences",
      "branches": [
        {
          "if": "directive_preferences_exist",
          "then": "load_task_preferences",
          "details": {
            "query": "SELECT preference_key, preference_value FROM directive_preferences WHERE directive_name='project_task_decomposition' AND active=1",
            "common_preferences": [
              "task_granularity",
              "naming_convention",
              "auto_create_items",
              "default_priority"
            ]
          }
        },
        {
          "if": "preferences_loaded",
          "then": "decompose_with_preferences",
          "details": {
            "apply_granularity": true,
            "respect_naming_convention": true
          }
        },
        {
          "if": "task_decomposition_requested",
          "then": "call_aifp_status",
          "details": {
            "purpose": "Understand current context before creating new tasks",
            "brief": true
          }
        },
        {
          "if": "status_obtained",
          "then": "review_open_tasks",
          "details": {
            "check_sidequests": true,
            "check_subtasks": true,
            "check_tasks": true
          }
        },
        {
          "if": "related_to_open_task",
          "then": "update_if_needed",
          "details": {
            "check_alignment": true
          }
        },
        {
          "if": "new_task_needed",
          "then": "create_new_task",
          "details": {
            "link_to_completion_path": true,
            "update_project_version": true
          }
        },
        {
          "if": "subtask_needed",
          "then": "create_subtask",
          "details": {
            "table": "subtasks",
            "priority": "high",
            "pause_parent_task": true
          }
        },
        {
          "if": "sidequest_needed",
          "then": "create_sidequest",
          "details": {
            "table": "sidequests",
            "priority": "low",
            "link_to_project": true
          }
        },
        {
          "if": "interruption_detected",
          "then": "handle_subtask_priority",
          "details": {
            "notify_user": true,
            "options": "complete/discard/resume"
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Is this a new task, subtask, or sidequest?"
          }
        },
        {
          "parallel": [
            "execute_code_gen",
            "update_db"
          ],
          "details": {
            "if_code_and_db": true
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user",
        "retry": "max 2 attempts"
      }
    },
    "roadblocks_json": [
      {
        "issue": "task vs subtask vs sidequest ambiguity",
        "resolution": "Prompt user for clarification, log in notes"
      },
      {
        "issue": "no matching open task",
        "resolution": "Create new task or sidequest, align to completion_path"
      },
      {
        "issue": "status_unavailable",
        "resolution": "Continue with decomposition but warn user about potential context issues"
      }
    ],
    "intent_keywords_json": [
      "decompose task",
      "break down",
      "plan steps",
      "explore"
    ],
    "confidence_threshold": 0.5
  },
  {
    "name": "project_add_path",
    "type": "project",
    "level": 2,
    "parent_directive": "project_task_decomposition",
    "category": {
      "name": "task_management",
      "description": "Handles roadmap and completion_path modifications."
    },
    "description": "Creates or updates completion_path, milestones, and tasks in project.db to maintain project roadmap continuity. Maintains structural coherence of project paths and milestones.",
    "md_file_path": "directives/project_add_path.md",
    "workflow": {
      "trunk": "modify_path",
      "branches": [
        {
          "if": "new_path",
          "then": "insert_completion_path",
          "details": {
            "order_index": true
          }
        },
        {
          "if": "new_task",
          "then": "insert_task",
          "details": {
            "link_to_milestone": true
          }
        },
        {
          "if": "new_subtask",
          "then": "insert_subtask",
          "details": {
            "table": "subtasks",
            "priority": "high"
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Add to roadmap?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "path_misaligned",
        "resolution": "Prompt user for roadmap alignment"
      },
      {
        "issue": "duplicate_entry",
        "resolution": "Verify milestone/task uniqueness"
      }
    ],
    "intent_keywords_json": [
      "add path",
      "update roadmap",
      "milestone"
    ],
    "confidence_threshold": 0.6
  },
  {
    "name": "project_file_write",
    "type": "project",
    "level": 3,
    "parent_directive": "project_add_path",
    "category": {
      "name": "file_operations",
      "description": "Handles file generation and metadata updates."
    },
    "description": "Writes new or modified files using the AIFP-compliant output pattern, validates via FP directives, and updates project.db accordingly. Detects user directive generated files and marks them with appropriate metadata. Applies user preferences from directive_preferences table (e.g., always_add_docstrings, max_function_length, prefer_guard_clauses) loaded by user_preferences_sync. Core file generation directive; bridges code creation and database synchronization.",
    "md_file_path": "directives/project_file_write.md",
    "workflow": {
      "trunk": "check_user_preferences",
      "branches": [
        {
          "if": "directive_preferences_exist",
          "then": "load_and_apply_preferences",
          "details": {
            "query": "SELECT preference_key, preference_value FROM directive_preferences WHERE directive_name='project_file_write' AND active=1",
            "apply_to": "code_generation_context",
            "common_preferences": [
              "always_add_docstrings",
              "max_function_length",
              "prefer_guard_clauses",
              "code_style",
              "indent_style"
            ]
          }
        },
        {
          "if": "preferences_applied",
          "then": "generate_file_with_preferences",
          "details": {
            "respect_user_settings": true,
            "fallback_to_defaults": "if_preference_missing"
          }
        },
        {
          "if": "file_path_starts_with_.aifp-project/user-directives/generated/",
          "then": "mark_as_user_directive_implementation",
          "details": {
            "metadata_tag": "user_directive_generated",
            "still_apply_fp_checks": true
          }
        },
        {
          "if": "user_directive_file_and_compliant",
          "then": "write_file_and_link_to_directive",
          "details": {
            "update_db": true,
            "update_directive_implementations_table": true,
            "link_to_user_directive": true
          }
        },
        {
          "if": "code_compliant",
          "then": "write_file",
          "details": {
            "metadata": true,
            "update_db": true
          }
        },
        {
          "if": "non_compliant",
          "then": "fp_compliance_check",
          "details": {
            "escalate_to_fp_directives": true
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Fix compliance before write?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "missing_metadata",
        "resolution": "Add AIFP_METADATA, prompt user"
      },
      {
        "issue": "fp_violation",
        "resolution": "Trigger fp_compliance_check"
      },
      {
        "issue": "user_directive_link_missing",
        "resolution": "Parse file for directive reference in AIFP_METADATA or prompt user"
      }
    ],
    "intent_keywords_json": [
      "create file",
      "write code",
      "generate file"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_update_db",
    "type": "project",
    "level": 3,
    "parent_directive": "project_file_write",
    "category": {
      "name": "file_operations",
      "description": "Synchronizes generated code metadata with the project database."
    },
    "description": "Parses generated code for functions, dependencies, and metadata, then updates project.db tables accordingly to maintain accurate state tracking. Handles user directive generated files by also updating user_directives.db tables (directive_implementations). Central DB synchronization directive; ensures project.db accurately reflects file and function states after each generation cycle.",
    "md_file_path": "directives/project_update_db.md",
    "workflow": {
      "trunk": "parse_content",
      "branches": [
        {
          "if": "user_directive_generated_file",
          "then": "update_user_directives_db",
          "details": {
            "table": "directive_implementations",
            "link_to_user_directive": true,
            "store_file_path": true,
            "update_status": "implemented"
          }
        },
        {
          "if": "user_directive_implementation_updated",
          "then": "continue_with_project_db_update",
          "details": {
            "proceed_to_standard_flow": true
          }
        },
        {
          "if": "new_file",
          "then": "update_files_table",
          "details": {
            "checksum": true
          }
        },
        {
          "if": "new_function",
          "then": "update_functions_table",
          "details": {
            "deps_json": true
          }
        },
        {
          "if": "task_related",
          "then": "update_items_subtasks",
          "details": {
            "link_to_completion_path": true
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Update DB for what component?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "missing_metadata",
        "resolution": "Parse again or prompt user for function metadata"
      },
      {
        "issue": "checksum_mismatch",
        "resolution": "Recalculate and resync file entry"
      },
      {
        "issue": "user_directive_not_found",
        "resolution": "Parse file for directive reference or prompt user to link manually"
      }
    ],
    "intent_keywords_json": [
      "update db",
      "track file",
      "metadata"
    ],
    "confidence_threshold": 0.6
  },
  {
    "name": "project_compliance_check",
    "type": "project",
    "level": 4,
    "parent_directive": "project_update_db",
    "category": {
      "name": "compliance",
      "description": "Verifies AIFP rule adherence and functional progress."
    },
    "description": "Runs FP compliance directives to ensure code purity, no OOP, and structural correctness. Also verifies project completion alignment via project.db. Respects user preferences for compliance strictness (e.g., fp_strictness_level, auto_fix_violations) and applies user-approved exceptions. Validates project state and functional integrity before database updates or completion marking.",
    "md_file_path": "directives/project_compliance_check.md",
    "workflow": {
      "trunk": "check_user_preferences",
      "branches": [
        {
          "if": "directive_preferences_exist",
          "then": "load_compliance_preferences",
          "details": {
            "query": "SELECT preference_key, preference_value FROM directive_preferences WHERE directive_name='project_compliance_check' AND active=1",
            "also_check_user_settings": "fp_strictness_level",
            "common_preferences": [
              "auto_fix_violations",
              "skip_warnings",
              "strict_mode"
            ]
          }
        },
        {
          "if": "preferences_loaded",
          "then": "run_checks_with_preferences",
          "details": {
            "apply_strictness_level": true,
            "respect_user_exceptions": true
          }
        },
        {
          "if": "compliance_passed",
          "then": "proceed",
          "details": {
            "update_db": true
          }
        },
        {
          "if": "compliance_failed",
          "then": "alert_user",
          "details": {
            "escalate_to_fp_directives": [
              "fp_purity",
              "fp_no_oop"
            ]
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Resolve compliance issue manually?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "compliance_failure",
        "resolution": "Refer to FP directives and retry"
      },
      {
        "issue": "fp_violation",
        "resolution": "Run linked fp_* directives automatically"
      }
    ],
    "intent_keywords_json": [
      "verify",
      "check compliance",
      "validate code"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_completion_check",
    "type": "project",
    "level": 4,
    "parent_directive": "project_compliance_check",
    "category": {
      "name": "compliance",
      "description": "Evaluates roadmap progress and completion readiness."
    },
    "description": "Checks completion_path, milestones, and tasks for status updates. Marks completion milestones when conditions are met and logs alignment notes. Monitors roadmap alignment, marks progress milestones, and prevents premature completion marking.",
    "md_file_path": "directives/project_completion_check.md",
    "workflow": {
      "trunk": "check_progress",
      "branches": [
        {
          "if": "criteria_met",
          "then": "mark_done",
          "details": {
            "update_status": true
          }
        },
        {
          "if": "drift_detected",
          "then": "alert_user",
          "details": {
            "log_note": true
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Adjust roadmap or tasks?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "roadmap_drift",
        "resolution": "Prompt user to realign completion_path"
      },
      {
        "issue": "incomplete_tasks",
        "resolution": "Auto-mark pending subtasks or prompt user"
      }
    ],
    "intent_keywords_json": [
      "progress",
      "check completion",
      "roadmap"
    ],
    "confidence_threshold": 0.6
  },
  {
    "name": "project_error_handling",
    "type": "project",
    "level": 4,
    "parent_directive": "project_compliance_check",
    "category": {
      "name": "error_handling",
      "description": "Handles directive failures, logging, and escalation to user."
    },
    "description": "Monitors directive execution for known or unknown failures, applies stored roadblock resolutions, and logs issues to the notes table for transparency. Provides universal error recovery handling for all project-level directives. Integrates with the notes table for traceability.",
    "md_file_path": "directives/project_error_handling.md",
    "workflow": {
      "trunk": "check_roadblocks",
      "branches": [
        {
          "if": "known_issue",
          "then": "apply_resolution",
          "details": {
            "log_note": true
          }
        },
        {
          "if": "unknown_issue",
          "then": "prompt_user",
          "details": {
            "escalate_to_md": true
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Resolve error manually?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "log_and_halt"
      }
    },
    "roadblocks_json": [
      {
        "issue": "generic_error",
        "resolution": "Prompt user and record in notes"
      },
      {
        "issue": "workflow_failure",
        "resolution": "Escalate to associated .md file for guidance"
      }
    ],
    "intent_keywords_json": [
      "error",
      "failure",
      "roadblock",
      "issue"
    ],
    "confidence_threshold": 0.5
  },
  {
    "name": "project_evolution",
    "type": "project",
    "level": 4,
    "parent_directive": "project_completion_check",
    "category": {
      "name": "evolution_tracking",
      "description": "Tracks changes to project idea, goals, purpose, and updates ProjectBlueprint.md accordingly."
    },
    "description": "Handles versioning and pivot tracking for evolving project goals. Updates ProjectBlueprint.md sections when project-wide changes occur (architecture, goals, themes, flows, infrastructure, completion path). Logs changes in notes and updates roadmap and completion paths accordingly. Captures and logs project pivots for transparency in long-running projects. Updates project.version and completion paths.",
    "md_file_path": "directives/project_evolution.md",
    "workflow": {
      "trunk": "detect_project_wide_change",
      "branches": [
        {
          "if": "architecture_change",
          "then": "update_blueprint_section_2",
          "details": {
            "section": "Technical Blueprint",
            "update_db": [
              "project.version",
              "infrastructure"
            ],
            "increment_version": true,
            "backup_blueprint": true
          }
        },
        {
          "if": "goals_change",
          "then": "update_blueprint_section_1",
          "details": {
            "section": "Project Overview",
            "update_db": [
              "project.goals_json",
              "project.version"
            ],
            "increment_version": true,
            "backup_blueprint": true
          }
        },
        {
          "if": "themes_or_flows_change",
          "then": "update_blueprint_section_3",
          "details": {
            "section": "Project Themes & Flows",
            "update_db": [
              "themes",
              "flows",
              "project.version"
            ],
            "increment_version": true,
            "backup_blueprint": true
          }
        },
        {
          "if": "completion_path_change",
          "then": "update_blueprint_section_4",
          "details": {
            "section": "Completion Path",
            "update_db": [
              "completion_path",
              "milestones",
              "project.version"
            ],
            "increment_version": true,
            "backup_blueprint": true
          }
        },
        {
          "if": "infrastructure_change",
          "then": "update_blueprint_section_2_infrastructure",
          "details": {
            "section": "Technical Blueprint - Key Infrastructure",
            "update_db": [
              "infrastructure",
              "project.version"
            ],
            "increment_version": true,
            "backup_blueprint": true
          }
        },
        {
          "if": "pivot_detected",
          "then": "increment_version",
          "details": {
            "update_goals": true,
            "update_blueprint_section_1": true
          }
        },
        {
          "if": "path_affected",
          "then": "update_completion_path",
          "details": {
            "log_note": true,
            "update_blueprint_section_4": true
          }
        },
        {
          "if": "blueprint_updated",
          "then": "add_evolution_history",
          "details": {
            "section": "Section 5: Evolution History",
            "log_change": true,
            "show_version": true
          }
        },
        {
          "parallel": [
            "backup_blueprint_to_aifp_backups",
            "log_evolution_to_notes"
          ],
          "details": {
            "backup_path": ".aifp-project/backups/",
            "note_type": "evolution",
            "source": "directive",
            "directive_name": "project_evolution"
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Confirm pivot or adjust roadmap?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "pivot_ambiguity",
        "resolution": "Prompt user for new purpose and goals"
      },
      {
        "issue": "version_conflict",
        "resolution": "Reconcile project version and completion_path entries"
      },
      {
        "issue": "blueprint_missing",
        "resolution": "Generate new ProjectBlueprint.md from current database state"
      },
      {
        "issue": "blueprint_update_failed",
        "resolution": "Backup current state and prompt user for manual update"
      }
    ],
    "intent_keywords_json": [
      "pivot",
      "evolve",
      "update goals",
      "project change",
      "change architecture",
      "update infrastructure"
    ],
    "confidence_threshold": 0.6
  },
  {
    "name": "project_user_referral",
    "type": "project",
    "level": 4,
    "parent_directive": "project_error_handling",
    "category": {
      "name": "error_handling",
      "description": "Delegates unresolved issues back to the user."
    },
    "description": "When confidence is low or a workflow fails, prompts the user for guidance and logs the clarification request to notes for review. Standard fallback directive for AI\u2013user collaboration. Ensures ambiguous operations always route through human confirmation.",
    "md_file_path": "directives/project_user_referral.md",
    "workflow": {
      "trunk": "check_confidence",
      "branches": [
        {
          "if": "low_confidence",
          "then": "prompt_user",
          "details": {
            "log_note": true
          }
        },
        {
          "if": "workflow_failure",
          "then": "escalate_to_md",
          "details": {
            "prompt_user": true
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Resolve or confirm intended action?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "log_and_halt"
      }
    },
    "roadblocks_json": [
      {
        "issue": "unresolved_issue",
        "resolution": "Prompt user and record clarification in notes"
      },
      {
        "issue": "low_confidence_path",
        "resolution": "Escalate to user confirmation"
      }
    ],
    "intent_keywords_json": [
      "clarify",
      "user input",
      "confirmation",
      "resolve"
    ],
    "confidence_threshold": 0.5
  },
  {
    "name": "project_theme_flow_mapping",
    "type": "project",
    "level": 3,
    "parent_directive": "project_file_write",
    "category": {
      "name": "theme_mapping",
      "description": "Links generated code elements to project themes and flows, triggers ProjectBlueprint.md updates."
    },
    "description": "Infers or assigns flow and theme groupings based on file metadata, updating linking tables for file_flows and flow_themes within project.db. Maintains thematic and procedural grouping across project files. Supports roadmap visualization and organization. Triggers project_evolution directive when themes or flows are added or modified to update ProjectBlueprint.md accordingly.",
    "md_file_path": "directives/project_theme_flow_mapping.md",
    "workflow": {
      "trunk": "infer_metadata",
      "branches": [
        {
          "if": "metadata_present",
          "then": "update_flow_themes",
          "details": {
            "confidence_score": true
          }
        },
        {
          "if": "no_metadata",
          "then": "prompt_user",
          "details": {
            "assign_default": true
          }
        },
        {
          "if": "theme_or_flow_updated",
          "then": "call_project_evolution",
          "details": {
            "change_type": "themes_or_flows_change",
            "trigger_blueprint_update": true,
            "update_section": 3
          }
        },
        {
          "if": "new_theme_created",
          "then": "call_project_evolution",
          "details": {
            "change_type": "themes_or_flows_change",
            "trigger_blueprint_update": true
          }
        },
        {
          "if": "new_flow_created",
          "then": "call_project_evolution",
          "details": {
            "change_type": "themes_or_flows_change",
            "trigger_blueprint_update": true
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Assign theme and flow manually?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "ambiguous_mapping",
        "resolution": "Prompt user to specify theme or flow"
      },
      {
        "issue": "missing_metadata",
        "resolution": "Parse file for AIFP_METADATA or prompt user"
      },
      {
        "issue": "blueprint_update_failed",
        "resolution": "Continue with DB update but log warning about blueprint sync"
      }
    ],
    "intent_keywords_json": [
      "theme",
      "flow",
      "grouping",
      "categorize"
    ],
    "confidence_threshold": 0.5
  },
  {
    "name": "project_metrics",
    "type": "project",
    "level": 4,
    "parent_directive": "project_completion_check",
    "category": {
      "name": "metrics",
      "description": "Tracks quantitative and qualitative project progress metrics."
    },
    "description": "Calculates project completion percentage, directive success rates, and task distribution to inform AI reasoning and user summaries. Provides periodic project health reports for both AI and user reference. Logged in notes for transparency.",
    "md_file_path": "directives/project_metrics.md",
    "workflow": {
      "trunk": "gather_metrics",
      "branches": [
        {
          "if": "completion_path_available",
          "then": "compute_progress",
          "details": {
            "aggregate": true
          }
        },
        {
          "if": "function_table_updated",
          "then": "calculate_compliance_score",
          "details": {
            "fp_links": true
          }
        },
        {
          "fallback": "log_metrics_to_notes"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "missing_task_data",
        "resolution": "Requery project.db and retry"
      },
      {
        "issue": "stale_metrics",
        "resolution": "Recalculate from base tables"
      }
    ],
    "intent_keywords_json": [
      "progress",
      "metrics",
      "statistics"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_performance_summary",
    "type": "project",
    "level": 4,
    "parent_directive": "project_metrics",
    "category": {
      "name": "metrics",
      "description": "Generates a summary of recent directive and workflow performance."
    },
    "description": "Summarizes recent directive outcomes, including successes, retries, and failures, and stores summaries in notes for audit. Keeps a rolling summary of directive performance for reliability tracking.",
    "md_file_path": "directives/project_performance_summary.md",
    "workflow": {
      "trunk": "summarize_recent_runs",
      "branches": [
        {
          "if": "error_logs_present",
          "then": "analyze_failures"
        },
        {
          "if": "recent_successes",
          "then": "record_success_rate"
        },
        {
          "fallback": "write_summary_to_notes"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "missing_logs",
        "resolution": "Query notes table for directive references"
      }
    ],
    "intent_keywords_json": [
      "summary",
      "audit",
      "performance"
    ],
    "confidence_threshold": 0.6
  },
  {
    "name": "project_dependency_sync",
    "type": "project",
    "level": 3,
    "parent_directive": "project_update_db",
    "category": {
      "name": "dependency_management",
      "description": "Reconciles mismatched dependencies between code and project.db."
    },
    "description": "Compares functions and flows in files against database records, resolving missing or outdated dependencies. Maintains consistency between the physical codebase and project metadata.",
    "md_file_path": "directives/project_dependency_sync.md",
    "workflow": {
      "trunk": "compare_db_and_files",
      "branches": [
        {
          "if": "missing_function_in_db",
          "then": "insert_function_entry"
        },
        {
          "if": "db_function_stale",
          "then": "update_dependency_entry"
        },
        {
          "if": "unlinked_file",
          "then": "link_to_flow"
        },
        {
          "fallback": "log_sync_status"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "unresolved_dependency",
        "resolution": "Prompt user to confirm update direction"
      }
    ],
    "intent_keywords_json": [
      "dependency",
      "sync",
      "link"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_integrity_check",
    "type": "project",
    "level": 4,
    "parent_directive": "project_dependency_sync",
    "category": {
      "name": "dependency_management",
      "description": "Performs integrity verification on project.db."
    },
    "description": "Runs validation queries to detect orphaned records, missing links, and checksum mismatches within project.db. Ensures internal DB consistency, preventing corruption during iterative project growth.",
    "md_file_path": "directives/project_integrity_check.md",
    "workflow": {
      "trunk": "run_integrity_queries",
      "branches": [
        {
          "if": "missing_foreign_key",
          "then": "repair_link"
        },
        {
          "if": "checksum_error",
          "then": "recalculate_file_checksum"
        },
        {
          "fallback": "log_integrity_status"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "data_misalignment",
        "resolution": "Auto-correct links where safe"
      }
    ],
    "intent_keywords_json": [
      "integrity",
      "verify database",
      "consistency"
    ],
    "confidence_threshold": 0.8
  },
  {
    "name": "project_auto_resume",
    "type": "project",
    "level": 3,
    "parent_directive": "aifp_run",
    "category": {
      "name": "recovery_automation",
      "description": "Automatically resumes interrupted tasks or workflows."
    },
    "description": "Detects unfinished tasks or subtasks from project.db and resumes execution at the appropriate directive entry point. Restores workflow continuity between user sessions or interruptions.",
    "md_file_path": "directives/project_auto_resume.md",
    "workflow": {
      "trunk": "detect_incomplete_tasks",
      "branches": [
        {
          "if": "task_paused",
          "then": "resume_from_checkpoint"
        },
        {
          "if": "sidequest_paused",
          "then": "prompt_resume"
        },
        {
          "fallback": "mark_as_resolved"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "resume_conflict",
        "resolution": "Prompt user to choose branch or discard task"
      }
    ],
    "intent_keywords_json": [
      "resume",
      "continue",
      "checkpoint"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_backup_restore",
    "type": "project",
    "level": 4,
    "parent_directive": "project_integrity_check",
    "category": {
      "name": "recovery_automation",
      "description": "Manages project database and file backups."
    },
    "description": "Creates periodic backups of project.db and associated files, and restores them on demand or after failure detection. Protects project state from corruption or user error. Integrates with integrity check for recovery decisions.",
    "md_file_path": "directives/project_backup_restore.md",
    "workflow": {
      "trunk": "perform_backup",
      "branches": [
        {
          "if": "scheduled_backup_time",
          "then": "execute_backup"
        },
        {
          "if": "restore_requested",
          "then": "load_backup"
        },
        {
          "fallback": "log_backup_status"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "backup_failure",
        "resolution": "Prompt user to retry or restore manually"
      }
    ],
    "intent_keywords_json": [
      "backup",
      "restore",
      "recovery"
    ],
    "confidence_threshold": 0.6
  },
  {
    "name": "project_archive",
    "type": "project",
    "level": 4,
    "parent_directive": "project_completion_check",
    "category": {
      "name": "archival_refactor",
      "description": "Archives completed projects for long-term storage."
    },
    "description": "Packages the final project.db, all files, and completion reports into an archive format and marks project status as 'archived'. Preserves completed project versions and prepares exportable deliverables.",
    "md_file_path": "directives/project_archive.md",
    "workflow": {
      "trunk": "prepare_archive",
      "branches": [
        {
          "if": "project_completed",
          "then": "compress_and_store"
        },
        {
          "if": "incomplete_milestones",
          "then": "prompt_user_to_finalize"
        },
        {
          "fallback": "log_archive_status"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "archive_incomplete",
        "resolution": "Prompt user for approval before packaging"
      }
    ],
    "intent_keywords_json": [
      "archive",
      "package",
      "finalize"
    ],
    "confidence_threshold": 0.8
  },
  {
    "name": "project_refactor_path",
    "type": "project",
    "level": 3,
    "parent_directive": "project_evolution",
    "category": {
      "name": "archival_refactor",
      "description": "Refactors roadmap paths and milestones."
    },
    "description": "Allows restructuring of completion_path sequences for clarity, merging or reordering tasks while maintaining linkage integrity. Provides roadmap reorganization utilities for evolving projects.",
    "md_file_path": "directives/project_refactor_path.md",
    "workflow": {
      "trunk": "analyze_completion_path",
      "branches": [
        {
          "if": "duplicate_milestone",
          "then": "merge_entries"
        },
        {
          "if": "order_misaligned",
          "then": "reorder_path"
        },
        {
          "fallback": "log_changes"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "path_conflict",
        "resolution": "Prompt user for reorder approval"
      }
    ],
    "intent_keywords_json": [
      "refactor path",
      "reorder roadmap"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_dependency_map",
    "type": "project",
    "level": 3,
    "parent_directive": "project_dependency_sync",
    "category": {
      "name": "dependency_management",
      "description": "Generates visual dependency maps across project entities."
    },
    "description": "Queries relationships between files, functions, flows, and tasks to produce a dependency graph for reasoning or visualization. Improves transparency and traceability across project elements for AIFP reasoning.",
    "md_file_path": "directives/project_dependency_map.md",
    "workflow": {
      "trunk": "generate_dependency_graph",
      "branches": [
        {
          "if": "linked_entities_found",
          "then": "store_dependency_map"
        },
        {
          "fallback": "log_dependency_status"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "missing_links",
        "resolution": "Rebuild function-to-task relationships"
      }
    ],
    "intent_keywords_json": [
      "dependency map",
      "graph",
      "visualize"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_auto_summary",
    "type": "project",
    "level": 4,
    "parent_directive": "project_metrics",
    "category": {
      "name": "metrics",
      "description": "Automatically summarizes project status and context."
    },
    "description": "Generates a human-readable summary of project purpose, progress, and open tasks, stored in notes or output to the terminal. Provides quick, automated overviews of project state for both AI and user consumption.",
    "md_file_path": "directives/project_auto_summary.md",
    "workflow": {
      "trunk": "summarize_project_state",
      "branches": [
        {
          "if": "active_tasks_found",
          "then": "summarize_by_path"
        },
        {
          "if": "completed_milestones",
          "then": "log_completion_summary"
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Include additional context?"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "summary_generation_failed",
        "resolution": "Retry summary or prompt user for context"
      }
    ],
    "intent_keywords_json": [
      "summary",
      "status",
      "report"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "aifp_status",
    "type": "project",
    "level": 1,
    "parent_directive": "aifp_run",
    "category": {
      "name": "status_management",
      "description": "Retrieves comprehensive project status with context-aware task continuation support."
    },
    "description": "Retrieves comprehensive project status with historical context for task continuation. For existing projects: reads ProjectBlueprint.md, loads infrastructure, builds priority status tree (sidequests \u2192 subtasks \u2192 tasks), provides historical context from previous tasks, checks for ambiguities, and generates status report. For new projects: checks for .aifp/ folder, checks .git/.aifp/ backup, prompts for restoration or initialization.",
    "md_file_path": "directives/aifp_status.md",
    "workflow": {
      "trunk": "determine_project_state",
      "branches": [
        {
          "if": "aifp_folder_exists",
          "then": "sync_git_state_on_boot",
          "details": {
            "trigger": "git_sync_state directive",
            "action": "Detect external changes and sync Git hash"
          }
        },
        {
          "if": "git_synced",
          "then": "get_existing_project_status",
          "details": {
            "call_helper": "get_project_status"
          }
        },
        {
          "if": "no_aifp_folder",
          "then": "check_git_aifp_backup",
          "details": {
            "check_path": ".git/.aifp/ProjectBlueprint.md"
          }
        },
        {
          "if": "git_backup_found",
          "then": "prompt_restore_or_init",
          "details": {
            "options": [
              "restore",
              "init_new",
              "exit"
            ]
          }
        },
        {
          "if": "no_backups",
          "then": "prompt_init_new_project",
          "details": {
            "suggest_project_init": true
          }
        },
        {
          "if": "existing_project",
          "then": "read_project_blueprint",
          "details": {
            "call_helper": "project_blueprint_read",
            "path": ".aifp-project/ProjectBlueprint.md"
          }
        },
        {
          "if": "blueprint_read",
          "then": "load_infrastructure_context",
          "details": {
            "query": "SELECT type, value, description FROM infrastructure WHERE project_id = ?"
          }
        },
        {
          "if": "infrastructure_loaded",
          "then": "check_user_directives_status",
          "details": {
            "query": "SELECT user_directives_status FROM project WHERE id = ?",
            "include_in_report": true
          }
        },
        {
          "if": "user_directives_active",
          "then": "query_user_directive_stats",
          "details": {
            "count_active": true,
            "get_last_execution": true,
            "get_error_count": true
          }
        },
        {
          "if": "user_directive_stats_gathered",
          "then": "build_priority_status_tree",
          "details": {
            "priority_order": [
              "sidequests",
              "subtasks",
              "tasks"
            ],
            "context_limit": 10
          }
        },
        {
          "if": "open_sidequests_found",
          "then": "get_sidequest_context",
          "details": {
            "get_parent_task": true,
            "get_all_items": true,
            "get_previous_task_if_no_completed": true,
            "previous_task_item_limit": 10
          }
        },
        {
          "if": "no_sidequests_open_subtasks",
          "then": "get_subtask_context",
          "details": {
            "get_parent_task": true,
            "get_all_items": true,
            "get_previous_task_if_no_completed": true,
            "previous_task_item_limit": 10
          }
        },
        {
          "if": "no_subtasks_open_tasks",
          "then": "get_task_context",
          "details": {
            "get_all_items": true,
            "evaluate_completed_vs_incomplete": true,
            "order_incomplete": true
          }
        },
        {
          "if": "context_gathered",
          "then": "check_for_ambiguities",
          "details": {
            "query_notes": true,
            "filter_severity": [
              "warning",
              "error"
            ],
            "filter_source": [
              "directive",
              "ai"
            ],
            "limit": 5
          }
        },
        {
          "if": "auto_run_mode",
          "then": "auto_browse_for_context",
          "details": {
            "browse_flows": true,
            "browse_functions": true,
            "browse_notes": true
          }
        },
        {
          "if": "status_complete",
          "then": "generate_status_report",
          "details": {
            "sections": [
              "current_focus",
              "open_items",
              "recently_completed",
              "historical_context",
              "ambiguities",
              "next_actions"
            ]
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Unable to determine project state"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "blueprint_missing",
        "resolution": "Attempt to load from database, generate new blueprint if needed"
      },
      {
        "issue": "no_open_work_items",
        "resolution": "Report project as idle, suggest next milestone or task creation"
      },
      {
        "issue": "database_empty",
        "resolution": "Inform user project initialized but no tasks created yet"
      },
      {
        "issue": "ambiguity_detected",
        "resolution": "Present ambiguities to user and offer to browse DB for more context"
      }
    ],
    "intent_keywords_json": [
      "status",
      "continue",
      "resume",
      "what's next",
      "show status",
      "project status",
      "where were we"
    ],
    "confidence_threshold": 0.8
  },
  {
    "name": "project_blueprint_read",
    "type": "project",
    "level": 2,
    "parent_directive": "aifp_status",
    "category": {
      "name": "blueprint_management",
      "description": "Standard helper for reading and parsing ProjectBlueprint.md."
    },
    "description": "Reads and parses ProjectBlueprint.md into structured data. Returns project metadata (name, version, status, goals), technical blueprint (language, runtime, architecture), themes, flows, and completion path. Falls back to database if blueprint file missing.",
    "md_file_path": "directives/project_blueprint_read.md",
    "workflow": {
      "trunk": "read_blueprint_file",
      "branches": [
        {
          "if": "blueprint_exists",
          "then": "parse_markdown_sections",
          "details": {
            "sections": [
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            "return_structured_data": true
          }
        },
        {
          "if": "blueprint_missing",
          "then": "check_database_fallback",
          "details": {
            "query_project_table": true,
            "query_infrastructure": true,
            "query_themes": true,
            "query_flows": true
          }
        },
        {
          "if": "database_fallback_success",
          "then": "return_db_data",
          "details": {
            "warn_user": "Blueprint missing, using database data"
          }
        },
        {
          "if": "parse_complete",
          "then": "return_structured_data",
          "details": {
            "include_checksum": true,
            "compare_with_db": true,
            "db_checksum_field": "project.blueprint_checksum"
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Blueprint not found and database empty"
          }
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "blueprint_corrupted",
        "resolution": "Attempt to parse sections individually, use database fallback for missing sections"
      },
      {
        "issue": "markdown_parse_error",
        "resolution": "Use database data and offer to regenerate blueprint"
      },
      {
        "issue": "checksum_mismatch",
        "resolution": "Warn user about potential blueprint/DB desync"
      }
    ],
    "intent_keywords_json": [
      "read blueprint",
      "load blueprint",
      "parse blueprint"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_blueprint_update",
    "type": "project",
    "level": 2,
    "parent_directive": "project_evolution",
    "category": {
      "name": "blueprint_management",
      "description": "Standard helper for updating specific sections of ProjectBlueprint.md."
    },
    "description": "Updates specific section of ProjectBlueprint.md with new content. Backs up current blueprint before modification, replaces section content, optionally increments version and adds evolution history entry. Used by project_evolution and other directives when project-wide changes occur.",
    "md_file_path": "directives/project_blueprint_update.md",
    "workflow": {
      "trunk": "validate_parameters",
      "branches": [
        {
          "if": "parameters_valid",
          "then": "read_current_blueprint",
          "details": {
            "call_helper": "project_blueprint_read"
          }
        },
        {
          "if": "blueprint_read",
          "then": "backup_current_blueprint",
          "details": {
            "backup_to": ".aifp-project/backups/ProjectBlueprint.md.v{version}",
            "include_timestamp": true
          }
        },
        {
          "if": "backup_complete",
          "then": "replace_section_content",
          "details": {
            "section_number": "from_params",
            "new_content": "from_params"
          }
        },
        {
          "if": "increment_version_requested",
          "then": "update_version_and_date",
          "details": {
            "increment_project_version_in_db": true,
            "update_last_updated_date": true
          }
        },
        {
          "if": "version_incremented",
          "then": "add_evolution_history_entry",
          "details": {
            "section": 5,
            "log_change": true,
            "show_version": true,
            "show_date": true
          }
        },
        {
          "if": "section_replaced",
          "then": "write_updated_blueprint",
          "details": {
            "path": ".aifp-project/ProjectBlueprint.md"
          }
        },
        {
          "if": "write_complete",
          "then": "update_blueprint_checksum",
          "details": {
            "update_checksum": true,
            "table": "project",
            "field": "blueprint_checksum"
          }
        },
        {
          "if": "update_complete",
          "then": "return_success",
          "details": {
            "show_new_version": true
          }
        },
        {
          "fallback": "prompt_user",
          "details": {
            "clarify": "Blueprint update failed"
          }
        }
      ],
      "error_handling": {
        "on_failure": "restore_from_backup",
        "prompt_user": true
      }
    },
    "roadblocks_json": [
      {
        "issue": "section_not_found",
        "resolution": "Warn user and append new section to blueprint"
      },
      {
        "issue": "backup_failed",
        "resolution": "Abort update and prompt user"
      },
      {
        "issue": "write_failed",
        "resolution": "Restore from backup and prompt user"
      },
      {
        "issue": "version_conflict",
        "resolution": "Prompt user to resolve version manually"
      }
    ],
    "intent_keywords_json": [
      "update blueprint",
      "modify blueprint",
      "change blueprint section"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_file_read",
    "type": "project",
    "level": 3,
    "parent_directive": "project_file_write",
    "category": {
      "name": "file_operations",
      "description": "Context-aware file reading with database metadata"
    },
    "description": "Intelligent file reader that provides file content with full database context including metadata, functions, dependencies, theme/flow associations, and checksum verification. Detects if file changed since last DB update.",
    "md_file_path": "directives/project_file_read.md",
    "workflow": {
      "trunk": "validate_file_path",
      "branches": [
        {
          "if": "file_exists_in_db",
          "then": "load_with_context"
        },
        {
          "if": "file_not_in_db_but_exists",
          "then": "load_without_context"
        },
        {
          "if": "checksum_mismatch",
          "then": "warn_file_changed"
        },
        {
          "fallback": "prompt_user"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "file_not_found",
        "resolution": "Verify path and prompt user"
      },
      {
        "issue": "file_not_tracked",
        "resolution": "Suggest running project_file_write"
      }
    ],
    "intent_keywords_json": [
      "read file",
      "load file",
      "file context"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_file_delete",
    "type": "project",
    "level": 3,
    "parent_directive": "project_file_write",
    "category": {
      "name": "file_operations",
      "description": "Safe file deletion with database cleanup"
    },
    "description": "Safe file remover that ensures filesystem and database consistency. Handles dependency checking, soft vs hard delete, backup creation, and cascade cleanup of orphaned functions and interactions.",
    "md_file_path": "directives/project_file_delete.md",
    "workflow": {
      "trunk": "validate_delete_request",
      "branches": [
        {
          "if": "file_tracked_in_db",
          "then": "check_dependencies"
        },
        {
          "if": "dependencies_exist",
          "then": "warn_and_confirm"
        },
        {
          "if": "user_confirms_delete",
          "then": "create_backup_option"
        },
        {
          "if": "hard_delete_confirmed",
          "then": "delete_file_and_db_records"
        },
        {
          "if": "soft_delete_confirmed",
          "then": "mark_deleted_in_db"
        },
        {
          "fallback": "cancel_delete"
        }
      ],
      "error_handling": {
        "on_failure": "restore_from_backup"
      }
    },
    "roadblocks_json": [
      {
        "issue": "dependencies_exist",
        "resolution": "Warn user and offer soft delete"
      },
      {
        "issue": "delete_failed",
        "resolution": "Restore from backup if created"
      }
    ],
    "intent_keywords_json": [
      "delete file",
      "remove file",
      "file cleanup"
    ],
    "confidence_threshold": 0.8
  },
  {
    "name": "project_task_create",
    "type": "project",
    "level": 3,
    "parent_directive": "project_task_decomposition",
    "category": {
      "name": "task_management",
      "description": "Atomic task creation"
    },
    "description": "Atomic task constructor for creating new independent tasks. Links to milestone, sets initial status, assigns priority, validates inputs, and returns task ID for immediate use.",
    "md_file_path": "directives/project_task_create.md",
    "workflow": {
      "trunk": "validate_inputs",
      "branches": [
        {
          "if": "inputs_valid",
          "then": "check_milestone_exists"
        },
        {
          "if": "milestone_valid",
          "then": "check_duplicate_tasks"
        },
        {
          "if": "no_duplicates_or_confirmed",
          "then": "create_task_record"
        },
        {
          "if": "task_created",
          "then": "return_task_id"
        },
        {
          "fallback": "prompt_user"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "duplicate_task",
        "resolution": "Prompt user to confirm or rename"
      },
      {
        "issue": "invalid_milestone",
        "resolution": "Prompt user to select valid milestone"
      }
    ],
    "intent_keywords_json": [
      "create task",
      "new task",
      "add task"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_task_update",
    "type": "project",
    "level": 3,
    "parent_directive": "project_task_decomposition",
    "category": {
      "name": "task_management",
      "description": "Task lifecycle state management"
    },
    "description": "Central task state manager for updating status, priority, and metadata. Handles completion logic, resumes paused tasks, maintains roadmap integrity, and triggers downstream actions.",
    "md_file_path": "directives/project_task_update.md",
    "workflow": {
      "trunk": "identify_update_type",
      "branches": [
        {
          "if": "status_update_requested",
          "then": "update_task_status"
        },
        {
          "if": "task_completed",
          "then": "handle_completion"
        },
        {
          "if": "subtask_completed_parent_paused",
          "then": "resume_parent_task"
        },
        {
          "if": "priority_update_requested",
          "then": "update_task_priority"
        },
        {
          "fallback": "prompt_user"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "invalid_state_transition",
        "resolution": "Warn user about valid transitions"
      },
      {
        "issue": "completed_task_reopened",
        "resolution": "Block reopening completed tasks"
      }
    ],
    "intent_keywords_json": [
      "update task",
      "mark complete",
      "change status",
      "task priority"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_subtask_create",
    "type": "project",
    "level": 3,
    "parent_directive": "project_task_decomposition",
    "category": {
      "name": "task_management",
      "description": "Atomic subtask creation with parent management"
    },
    "description": "Atomic subtask constructor that creates focused, high-priority subtasks and automatically pauses parent tasks until completion. Subtasks are immediate-focus work that blocks parent task progress.",
    "md_file_path": "directives/project_subtask_create.md",
    "workflow": {
      "trunk": "validate_inputs",
      "branches": [
        {
          "if": "inputs_valid",
          "then": "check_parent_task_exists"
        },
        {
          "if": "parent_task_valid",
          "then": "check_active_subtasks"
        },
        {
          "if": "no_blocking_subtasks_or_confirmed",
          "then": "create_subtask_record"
        },
        {
          "if": "subtask_created",
          "then": "pause_parent_task"
        },
        {
          "if": "parent_paused",
          "then": "return_subtask_id"
        },
        {
          "fallback": "prompt_user"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "parent_task_completed",
        "resolution": "Cannot create subtask for completed task"
      },
      {
        "issue": "multiple_active_subtasks",
        "resolution": "Warn about context switching"
      }
    ],
    "intent_keywords_json": [
      "create subtask",
      "new subtask",
      "refine task"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_item_create",
    "type": "project",
    "level": 3,
    "parent_directive": "project_task_decomposition",
    "category": {
      "name": "task_management",
      "description": "Atomic item creation for granular tracking"
    },
    "description": "Atomic item constructor for creating smallest work units within tasks. Links to parent task, supports optional file/function references, and enables fine-grained progress tracking.",
    "md_file_path": "directives/project_item_create.md",
    "workflow": {
      "trunk": "validate_inputs",
      "branches": [
        {
          "if": "inputs_valid",
          "then": "check_parent_task_exists"
        },
        {
          "if": "parent_task_valid",
          "then": "check_duplicate_items"
        },
        {
          "if": "no_duplicates_or_confirmed",
          "then": "create_item_record"
        },
        {
          "if": "item_created",
          "then": "return_item_id"
        },
        {
          "fallback": "prompt_user"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "parent_task_completed",
        "resolution": "Cannot add items to completed task"
      },
      {
        "issue": "duplicate_item",
        "resolution": "Prompt user to confirm"
      }
    ],
    "intent_keywords_json": [
      "create item",
      "new item",
      "add checklist"
    ],
    "confidence_threshold": 0.7
  },
  {
    "name": "project_sidequest_create",
    "type": "project",
    "level": 3,
    "parent_directive": "project_task_decomposition",
    "category": {
      "name": "task_management",
      "description": "Exploratory work tracking"
    },
    "description": "Atomic sidequest constructor for creating exploratory interruptions. Handles fixes, pivots, or unrelated work that pauses tasks. Default low priority for exploratory work outside main roadmap.",
    "md_file_path": "directives/project_sidequest_create.md",
    "workflow": {
      "trunk": "validate_inputs",
      "branches": [
        {
          "if": "linked_to_task",
          "then": "create_with_task_link"
        },
        {
          "if": "exploratory_work",
          "then": "create_standalone"
        },
        {
          "if": "bug_fix",
          "then": "create_fix_sidequest"
        },
        {
          "if": "pivot_exploration",
          "then": "create_pivot_sidequest"
        },
        {
          "fallback": "prompt_user"
        }
      ],
      "error_handling": {
        "on_failure": "prompt_user"
      }
    },
    "roadblocks_json": [
      {
        "issue": "too_many_sidequests",
        "resolution": "Warn about focus fragmentation"
      },
      {
        "issue": "sidequest_should_be_task",
        "resolution": "Suggest creating task instead"
      }
    ],
    "intent_keywords_json": [
      "create sidequest",
      "exploratory work",
      "bug fix",
      "interruption"
    ],
    "confidence_threshold": 0.7
  }
]