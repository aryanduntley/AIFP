{
  "_comment": "AWS Infrastructure Management User Directives Example",
  "_description": "This file demonstrates user-defined directives for AWS cloud infrastructure automation",
  "_save_to": ".aifp/user-directives/source/aws_infrastructure.json",

  "directives": [
    {
      "name": "auto_scale_ec2_on_high_cpu",
      "description": "Automatically scale EC2 instances when average CPU usage exceeds 80%",
      "domain": "aws_infrastructure",
      "priority": 10,
      "trigger": {
        "type": "condition",
        "check_interval": 300,
        "condition": "avg_cpu_usage > 80 AND instance_count < max_instances"
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "ec2",
        "method": "run_instances",
        "params": {
          "ImageId": "ami-0c55b159cbfafe1f0",
          "InstanceType": "t3.medium",
          "MinCount": 1,
          "MaxCount": 2,
          "KeyName": "my-key-pair",
          "SecurityGroupIds": ["sg-0123456789abcdef0"],
          "SubnetId": "subnet-0123456789abcdef0",
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {"Key": "Name", "Value": "AutoScaled-Instance"},
                {"Key": "Environment", "Value": "Production"},
                {"Key": "ManagedBy", "Value": "AIFP"}
              ]
            }
          ]
        }
      }
    },

    {
      "name": "stop_idle_ec2_instances",
      "description": "Stop EC2 instances with low CPU usage (< 5%) for more than 2 hours",
      "domain": "aws_infrastructure",
      "priority": 7,
      "trigger": {
        "type": "condition",
        "check_interval": 600,
        "condition": "avg_cpu_usage < 5 AND idle_duration_seconds > 7200"
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "ec2",
        "method": "stop_instances",
        "params": {
          "InstanceIds": ["<detected_idle_instance_ids>"]
        }
      }
    },

    {
      "name": "backup_rds_databases_nightly",
      "description": "Create RDS snapshots every night at 1am",
      "domain": "aws_infrastructure",
      "priority": 9,
      "trigger": {
        "type": "time",
        "time": "01:00",
        "timezone": "America/New_York"
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "rds",
        "method": "create_db_snapshot",
        "params": {
          "DBInstanceIdentifier": "prod-database",
          "DBSnapshotIdentifier": "prod-database-snapshot-{timestamp}"
        }
      }
    },

    {
      "name": "cleanup_old_s3_backups",
      "description": "Delete S3 backup objects older than 30 days",
      "domain": "aws_infrastructure",
      "priority": 4,
      "trigger": {
        "type": "time",
        "time": "03:00",
        "timezone": "America/New_York",
        "days": ["sunday"]
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "s3",
        "method": "delete_objects",
        "params": {
          "Bucket": "my-backup-bucket",
          "Delete": {
            "Objects": "<objects_older_than_30_days>"
          }
        }
      }
    },

    {
      "name": "monitor_cloudwatch_alarms",
      "description": "Check CloudWatch alarms and send notifications for critical issues",
      "domain": "aws_infrastructure",
      "priority": 10,
      "trigger": {
        "type": "condition",
        "check_interval": 60,
        "condition": "alarm.state == 'ALARM' AND alarm.severity == 'CRITICAL'"
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "sns",
        "method": "publish",
        "params": {
          "TopicArn": "arn:aws:sns:us-east-1:123456789012:critical-alerts",
          "Subject": "Critical CloudWatch Alarm Triggered",
          "Message": "Alarm: {alarm.name} - State: {alarm.state} - Reason: {alarm.reason}"
        }
      }
    },

    {
      "name": "scale_down_ecs_services_after_hours",
      "description": "Scale down ECS services to minimum capacity after business hours",
      "domain": "aws_infrastructure",
      "priority": 5,
      "trigger": {
        "type": "time",
        "time": "19:00",
        "timezone": "America/New_York",
        "days": ["monday", "tuesday", "wednesday", "thursday", "friday"]
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "ecs",
        "method": "update_service",
        "params": {
          "cluster": "prod-cluster",
          "service": "web-service",
          "desiredCount": 2
        }
      }
    },

    {
      "name": "scale_up_ecs_services_morning",
      "description": "Scale up ECS services to full capacity in the morning",
      "domain": "aws_infrastructure",
      "priority": 5,
      "trigger": {
        "type": "time",
        "time": "07:00",
        "timezone": "America/New_York",
        "days": ["monday", "tuesday", "wednesday", "thursday", "friday"]
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "ecs",
        "method": "update_service",
        "params": {
          "cluster": "prod-cluster",
          "service": "web-service",
          "desiredCount": 10
        }
      }
    },

    {
      "name": "rotate_iam_access_keys",
      "description": "Rotate IAM access keys older than 90 days",
      "domain": "aws_infrastructure",
      "priority": 8,
      "trigger": {
        "type": "condition",
        "check_interval": 86400,
        "condition": "access_key.age_days > 90"
      },
      "action": {
        "type": "function_call",
        "module": "aws_utils",
        "function": "rotate_access_key",
        "args": ["<access_key_id>", "<user_name>"],
        "kwargs": {
          "notify_user": true,
          "deactivate_old_key": true
        }
      }
    },

    {
      "name": "update_security_group_rules",
      "description": "Update security group rules to restrict access (manual trigger for security reviews)",
      "domain": "aws_infrastructure",
      "priority": 9,
      "trigger": {
        "type": "manual"
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "ec2",
        "method": "authorize_security_group_ingress",
        "params": {
          "GroupId": "sg-0123456789abcdef0",
          "IpPermissions": [
            {
              "IpProtocol": "tcp",
              "FromPort": 443,
              "ToPort": 443,
              "IpRanges": [{"CidrIp": "10.0.0.0/8", "Description": "Internal network only"}]
            }
          ]
        }
      }
    },

    {
      "name": "create_ami_backups_monthly",
      "description": "Create AMI backups of critical EC2 instances on the first day of each month",
      "domain": "aws_infrastructure",
      "priority": 7,
      "trigger": {
        "type": "time",
        "time": "02:00",
        "timezone": "America/New_York",
        "days": [1]
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "ec2",
        "method": "create_image",
        "params": {
          "InstanceId": "i-0123456789abcdef0",
          "Name": "prod-server-backup-{timestamp}",
          "NoReboot": true,
          "TagSpecifications": [
            {
              "ResourceType": "image",
              "Tags": [
                {"Key": "BackupType", "Value": "Monthly"},
                {"Key": "RetentionDays", "Value": "90"}
              ]
            }
          ]
        }
      }
    },

    {
      "name": "monitor_billing_threshold",
      "description": "Send alert if AWS billing exceeds threshold",
      "domain": "aws_infrastructure",
      "priority": 10,
      "trigger": {
        "type": "condition",
        "check_interval": 3600,
        "condition": "current_month_charges > 5000"
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "sns",
        "method": "publish",
        "params": {
          "TopicArn": "arn:aws:sns:us-east-1:123456789012:billing-alerts",
          "Subject": "AWS Billing Alert: Threshold Exceeded",
          "Message": "Current month charges: ${current_month_charges}. Threshold: $5000."
        }
      }
    },

    {
      "name": "enable_s3_versioning_on_new_buckets",
      "description": "Automatically enable versioning on newly created S3 buckets",
      "domain": "aws_infrastructure",
      "priority": 6,
      "trigger": {
        "type": "event",
        "source": "aws_cloudwatch_events",
        "event_name": "CreateBucket",
        "filter": "event.source == 's3.amazonaws.com' AND event.eventName == 'CreateBucket'"
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "s3",
        "method": "put_bucket_versioning",
        "params": {
          "Bucket": "{event.bucket_name}",
          "VersioningConfiguration": {
            "Status": "Enabled"
          }
        }
      }
    },

    {
      "name": "tag_untagged_resources",
      "description": "Automatically tag EC2 instances that don't have required tags",
      "domain": "aws_infrastructure",
      "priority": 5,
      "trigger": {
        "type": "condition",
        "check_interval": 3600,
        "condition": "ec2_instance.tags.Environment is None"
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "ec2",
        "method": "create_tags",
        "params": {
          "Resources": ["<untagged_instance_ids>"],
          "Tags": [
            {"Key": "Environment", "Value": "Unclassified"},
            {"Key": "ManagedBy", "Value": "AIFP"},
            {"Key": "NeedsReview", "Value": "true"}
          ]
        }
      }
    },

    {
      "name": "cleanup_unused_ebs_volumes",
      "description": "Delete EBS volumes that are unattached for more than 7 days",
      "domain": "aws_infrastructure",
      "priority": 6,
      "trigger": {
        "type": "condition",
        "check_interval": 86400,
        "condition": "ebs_volume.state == 'available' AND ebs_volume.unattached_days > 7"
      },
      "action": {
        "type": "api_call",
        "api": "aws",
        "service": "ec2",
        "method": "delete_volume",
        "params": {
          "VolumeId": "<unused_volume_id>"
        }
      }
    }
  ]
}
